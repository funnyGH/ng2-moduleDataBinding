{
  "data": [
    {
      "title": "模板中的 HTML",
      "des": "HTML 是 Angular 模板的语言。几乎所有的 HTML 语法都是有效的模板语法。 但值得注意的例外是 <script> 元素，它被禁用了，以阻止脚本注入攻击的风险。（实际上，<script> 只是被忽略了。）",
      "details":"",
      "tips":[
        
      ]
    },
    {
      "title": "插值表达式 ( {{...}} )",
      "des": "插值表达式可以把计算后的字符串插入到 HTML 元素标签内的文本或对标签的属性进行赋值。",
      "details":"",
      "tips":[
        "一般来说，括号间的素材是一个模板表达式，Angular 先对它求值，再把它转换成字符串。？？？",
        "Angular 对所有双花括号中的表达式求值，把求值的结果转换成字符串，并把它们跟相邻的字符串字面量连接起来。最后，把这个组合出来的插值结果赋给元素或指令的属性。???",
        "表面上看，你在元素标签之间插入了结果和对标签的属性进行了赋值。 这样思考起来很方便，并且这个误解很少给你带来麻烦。 但严格来讲，这是不对的。插值表达式是一个特殊的语法，Angular 把它转换成了属性绑定"
      ]
    },
    {
      "title": "模板表达式",
      "des": "模板表达式产生一个值。 Angular 执行这个表达式，并把它赋值给绑定目标的属性，这个绑定目标可能是 HTML 元素、组件或指令。",
      "details":"编写模板表达式所用的语言看起来很像 JavaScript。 很多 JavaScript 表达式也是合法的模板表达式，但不是全部。",
      "tips":[
        "JavaScript 中那些具有或可能引发副作用的表达式是被禁止的: *1、赋值 (=, +=, -=, ...) *2、new 运算符 *3、使用 ; 或 , 的链式表达式 *4、自增和自减运算符：++ 和 --",
        "和 JavaScript 语 法的其它显著不同包括： 不支持位运算 | 和 &、 具有新的模板表达式运算符，比如 |、?. 和 !。",
        "context表达式上下文（详见官网）"
      ]
    },
    {
      "title": "模板语句",
      "des": "模板语句用来响应由绑定目标（如 HTML 元素、组件或指令）触发的事件。 模板语句将在事件绑定里看到，它出现在 = 号右侧的引号中，就像这样：(event)='statement'。",
      "details":"模板语句有副作用。 这是事件处理的关键。因为你要根据用户的输入更新应用状态。",
      "tips":[
        "响应事件是 Angular 中“单向数据流”的另一面。 在一次事件循环中，可以随意改变任何地方的任何东西。",
        "和模板表达式一样，模板语句使用的语言也像 JavaScript。 模板语句解析器和模板表达式解析器有所不同，特别之处在于它支持基本赋值 (=) 和表达式链 (; 和 ,)。",
        "某些 JavaScript 语法仍然是不允许的：*1、new 运算符 *2、自增和自减运算符：++ 和 -- *3、操作并赋值，例如 += 和 -= *4、位操作符 | 和 & *5、模板表达式运算符"
      ]
    }
  ]
}