{
  "data": [
    {
      "title": "使用插值表达式显示组件属性",
      "des": "要显示组件的属性，最简单的方式就是通过插值表达式 (interpolation) 来绑定属性名。 要使用插值表达式，就把属性名包裹在双花括号里放进视图模板",
      "details":"Angular 自动从组件中提取属性的值，并且把这些值通过花括号插入浏览器中。当这些属性发生变化时，Angular 就会自动刷新显示",
      "demoImg": "",
      "tips":[
        "模板是包在 ECMAScript 2015 反引号 (`) 中的一个多行字符串。 反引号 (`) — 注意，不是单引号 (') — 允许把一个字符串写在多行上， 使 HTML 模板更容易阅读。",
        "严格来说，“重新显示”是在某些与视图有关的异步事件之后发生的，例如，按键、定时器完成或对 HTTP 请求的响应。"
      ]
    },
    {
      "title": "内联 (inline) 模板还是模板文件？",
      "des": "可以在两种地方存放组件模板",
      "details":"可以使用 template 属性把它定义为内联的，或者把模板定义在一个独立的 HTML 文件中， 再通过 @Component 装饰器中的 templateUrl 属性， 在组件元数据中把它链接到组件。",
      "demoImg": "",
      "tips":[
        "到底选择内联 HTML 还是独立 HTML 取决于个人喜好、具体状况和组织级策略。"
      ]
    },
    {
      "title": "使用构造函数还是变量初始化？",
      "des": "两种方法都可行",
      "details": "",
      "demoImg": "",
      "tips":[
        "constructor中不适合进行任何与组件通信类似的复杂操作",
        "ngOnchanges是输入属性值变化的时候调用，并且ngOnInit是在ngOnchanges执行完之后才调用，而constructor是在组件就实例化的时候就已经调用了，这也就是说，在constructor中我们是取不到输入属性的值的。"
      ]
    },
    {
      "title": "使用 ngFor 显示数组属性",
      "des": "ngFor 用于显示一个“数组”，不能天然遍历Object",
      "details": "通过管道和fn，ngFor 可以为任何可迭代的 (iterable) 对象重复渲染条目。",
      "demoImg": "",
      "tips":[
        "ngFor 不可以中断",
        "不要忘记 *ngFor 中的前导星号 (*)。它是语法中不可或缺的一部分。"
      ]
    },
    {
      "title": "为数据创建一个类",
      "des": "真实的应用中，大多是到一个对象数组的绑定，首先得有一个类。",
      "details": "",
      "demoImg": "",
      "tips":[
        
      ]
    },
    {
      "title": "通过 NgIf 进行条件显示",
      "des": "有时，应用需要只在特定情况下显示视图或视图的一部分。",
      "details":"ngIf 指令会根据一个布尔条件来显示或移除一个元素。",
      "demoImg": "",
      "tips":[
        "Angular 并不是在显示和隐藏这条消息，它是在从 DOM 中添加和移除这个段落元素。 这会提高性能，特别是在一些大的项目中有条件地包含或排除一大堆带着很多数据绑定的 HTML 时。",
        "ngif 和 ngfor 的区别及适合场景：二者都可以是表达式吗？？"
      ]
    }
  ]
}